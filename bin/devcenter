#!/usr/bin/env ruby
require 'devcenter'
require 'configliere'

Settings({
  'article.status' => "draft",
  'article.category_id' => '1'
})

Settings.read './article.yml' if File.exists? './article.yml'
Settings.use :commandline 
Settings.resolve!

command  = Settings.rest.shift

def login 
  puts "Heroku Username:"
  username = STDIN.gets.strip
  system "stty -echo"
  puts "Password:"
  password = STDIN.gets.strip
  system "stty echo"
  Devcenter.login!(username, password)
end

begin 
  case command
  when 'pull'
    id = Settings.rest.shift
    raise UserError, "no id given" unless id

    login and puts Devcenter.pull!(id)
  when 'push'
    filename = Settings.rest.shift
    raise UserError, "no filename given" unless filename

    raise ArgumentError, 'must title article' unless Settings['article.title']
    Settings(:article => {:content => Devcenter::Source.new(File.read(filename)).to_s})

    login and Devcenter.push!(Settings[:article])
    puts "pushed #{Settings[:article][:title]} to devcenter at #{Devcenter.resource}"
  when 'compile'
    filename = Settings.rest.shift
    raise "no filename given" unless filename

    puts Devcenter::Source.new(File.read(filename))
  else 
    puts <<-HELP.gsub(/ *\|/,'')
    |usage
    |  devcenter actions [article info] login  
    |
    |  actions
    |    compile <filename>
    |      compile file to STDOUT
    |
    |    push <filename>
    |      compile and push to DEVCENTER_URL or Dev Center
    |
    |    pull <id>    
    |     pull article and write to STDOUT
    |
    |   article info (use dot for nested values)
    |    --article.title='The Title'
    |    --article.slug='xyz'
    |
    |  login via
    |    --user=username@heroku.com
    |    --password=password
    HELP
  end
rescue UserError => e
  puts e.message
end
